<?php

/**
 * Abstraction of the users table
 * Generated by Abstractor from hphio\util
 */

namespace Hph\Models;


use Hph\RandomGenerator;
use League\Container\Container;

/**
 * @codeCoverageIgnore
 */
class UserBase
{

    /* <generated_b12d6a066c8fbac5ac5d41127c38596e569a47f8> */

    /* <database fields> */

    public $id                = null;
    public $username          = null;
    public $email             = null;
    public $password          = null;
    public $nonce             = null;
    public $role              = null;
    public $first             = null;
    public $last              = null;
    public $created           = null;
    public $last_login        = null;
    public $activation_status = null;
    public $parent_entity     = null;
    public $activated_on      = null;
    public $password_version  = null;
    public $uuid              = null;

    /* </database fields> */


    /* <Dependency Injection Fields> */

    public ?Container $container = null;

    /* </Dependency Injection Fields> */

    public function __construct(Container $container) {
        $this->container = $container;
    }

    /**
     * Returns an associative array of values for this class.
     * @return array
     */




    public function getMyValues() : array {

      $uuid = $this->container->get(RandomGenerator::class)->uuidv4();

        return [ "id"            => $this->id
               , "username"   => $this->username
               , "email"             => $this->email
               , "password"    => $this->password
               , "nonce"         => $this->nonce
               , "role"              => $this->role
               , "first"             => $this->first
               , "last"              => $this->last
               , "created"           => $this->created
               , "last_login"      => $this->last_login
               , "activation_status" => $this->activation_status
               , "parent_entity"    => $this->parent_entity
               , "activated_on"      => $this->activated_on
               , "password_version"  => $this->password_version
               , "uuid"              => $uuid
               ];
    }

    public function insert($insertError = null) {
        $sql = " INSERT INTO `users`
                (  `username`
                , `email`
                , `password`
                , `nonce`
                , `role`
                , `first`
                , `last`
                , `last_login`
                , `activation_status`
                , `parent_entity`
                , `activated_on`
                , `password_version`
                , `uuid`
                )
                VALUES
                ( :username
                , :email
                , :password
                , :nonce
                , :role
                , :first
                , :last
                , :last_login
                , :activation_status
                , :parent_entity
                , :activated_on
                , :password_version
                , :uuid
                )";
        $values = $this->getMyValues();
        unset($values['id']);
        unset($values['created']);

        $db = $this->container->get('db');
        $this->stmt = $db->prepare($sql);
//        try {
            $this->stmt->execute($values);
//        } catch (\Exception $e) {
//            var_dump($e->errorInfo());
//        }

        $this->id = $db->lastinsertid();
        return $this->id;

    }

    public function update() {
        $sql = "UPDATE `users`
                SET
                `username` = :username,
                `email` = :email,
                `password` = :password,
                `nonce` = :nonce,
                `role` = :role,
                `first` = :first,
                `last` = :last,
                `last_login` = :last_login,
                `activation_status` = :activation_status,
                `parent_entity` = :parent_entity,
                `activated_on` = :activated_on,
                `password_version` = :password_version,
                `uuid` = :uuid
                WHERE `id` = :id
                LIMIT 1";

        $values = $this->getMyValues();
        unset($values['created']);
        $this->prepareExecute($sql, $values, print_r($sql, true) . print_r($values, true));
    }

    /* </generated_b12d6a066c8fbac5ac5d41127c38596e569a47f8> */
}
